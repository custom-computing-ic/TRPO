import org.junit.Test;
import java.util.List;
import java.util.ArrayList;
import java.lang.Math;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.utils.Bits;

public class OddLayerTest {

    private final char      AcFunc = 't';
    private final int   InBlockDim = 2;
    private final int  NumInBlocks = 4;
    private final int  OutBlockDim = 16;
    private final int NumOutBlocks = 4;
    
    private final int WeightInitCycles = 2 * InBlockDim * OutBlockDim * NumOutBlocks;
    private final int BiasInitCycles   = 2 * OutBlockDim * NumOutBlocks;
    private final int FwdPropCycles    = InBlockDim * OutBlockDim;

    private class OddLayerTestKernel extends Kernel {

        OddLayerTestKernel(KernelParameters parameters, int ID)
        {

        super(parameters);

        ///////////////////////// Control /////////////////////////
        
        // Remarks - AddrGenerator cannot be reset at Tick 0, so postpone 1 cycle
        DFEVar Tick = control.count.simpleCounter(32);
        
        // Initialisation
        DFEVar beginInit = (Tick === 1);
        
        // Initialise Weight
        AddrGenerator WeightInitCounter = new AddrGenerator(this, 1, WeightInitCycles, beginInit);
        DFEVar isWeightInit = WeightInitCounter.isValid();          
        
        // Initialise Bias
        AddrGenerator BiasInitCounter = new AddrGenerator(this, 1, BiasInitCycles, beginInit);
        DFEVar isBiasInit = BiasInitCounter.isValid();        
        
        // Forward Propagation
        DFEVar beginFwdProp = (Tick === WeightInitCycles + 10);
        AddrGenerator ComputingCounter = new AddrGenerator(this, 1, FwdPropCycles, beginFwdProp);
        DFEVar isCalculating = ComputingCounter.isValid();


        ///////////////////////// Computing /////////////////////////

        // Inputs
        DFEVectorType<DFEVar>  yVecType = new DFEVectorType<DFEVar>(Def.DataType, NumInBlocks);
        DFEVectorType<DFEVar> RyVecType = new DFEVectorType<DFEVar>(Def.DataType, NumInBlocks);
        DFEVector<DFEVar>     PrevLayer = io.input("PrevLayer",    yVecType, isWeightInit | isCalculating);
        DFEVector<DFEVar>   PrevRyLayer = io.input("PrevRyLayer", RyVecType, isCalculating);        
        DFEVar             BiasInitData = io.input("BiasInitData", Def.DataType, isBiasInit);

        // Inputs for Back Propagation - provide dummy inputs
        int InBlockDimCycleTime = 20;
        DFEVector<DFEVar> BwdPrevLayer   = constant.vect(NumInBlocks,  Def.DataType, 0);
        DFEVector<DFEVar> BwdNextLayer   = constant.vect(NumOutBlocks, Def.DataType, 0);
        DFEVector<DFEVar> BwdNextRGLayer = constant.vect(NumOutBlocks, Def.RGType,   0);
        DFEVar beginBwdProp  = constant.var(dfeUInt(1), 0);
        DFEVar beginReadBack = constant.var(dfeUInt(1), 0);
        
        // Layer Block
        @SuppressWarnings("unused")
        OddLayer TestLayer = new OddLayer(this, ID, AcFunc, InBlockDim, NumInBlocks, OutBlockDim, NumOutBlocks, InBlockDimCycleTime,
                                    PrevLayer, BwdPrevLayer, PrevRyLayer, BwdNextLayer, BwdNextRGLayer,
                                    BiasInitData, beginInit, beginInit, beginFwdProp, beginBwdProp, beginReadBack);

        }
    }

    @Test 
    public void testAsInputLayer() {
        test(0);
    }

    @Test 
    public void testAsMiddleLayer() {
        test(1);
    }

    // Test Runner
    public void test(int ID) {
    
        // Settings
        final int numTicks = WeightInitCycles + FwdPropCycles + 20;
        final int  InLayerSize =  InBlockDim * NumInBlocks;
        final int OutLayerSize = OutBlockDim * NumOutBlocks;
        final int   NumWeights = InLayerSize * OutLayerSize;
        
        // Kernel
        SimulationManager  mgr = new SimulationManager("OddLayerTest");
        mgr.getCurrentKernelConfig().simulation.setRAMAddressCollisionBehaviour(KernelConfiguration.SimulationOptions.SimulationBehaviour.IGNORE);
        OddLayerTestKernel kernel = new OddLayerTestKernel(mgr.makeKernelParameters(), ID);
        mgr.setKernel(kernel);


        ///////////////////////// Weight, VWeight, PrevLayer /////////////////////////

        // Generate Random Weight and VWeight
        double []  W = new double[NumWeights];
        double [] VW = new double[NumWeights];
        for (int i=0; i<NumWeights; ++i) {
             W[i] = Math.random();
            VW[i] = Math.random();
        }
        
        // Generate Random PrevLayer
        double [] y = new double[InLayerSize];
        for (int i=0; i<InLayerSize; ++i) y[i] = Math.random();
        
        // Feed Random Weight, VWeight and PrevLayer into PrevLayerData
        double [][] PrevLayerData = new double[WeightInitCycles+InBlockDim*OutBlockDim][NumInBlocks];
        // Feed Weight
        for (int Y=0; Y<NumOutBlocks; ++Y) {
            for (int addrX=0; addrX<InBlockDim; ++addrX) {
                for (int addrY=0; addrY<OutBlockDim; ++addrY) {
                    int iter = Y*InBlockDim*OutBlockDim + addrX*OutBlockDim + addrY;   
                    for (int X=0; X<NumInBlocks; ++X) {
                        double curW = W[(X*InBlockDim+addrX)*OutLayerSize + Y*OutBlockDim + addrY];
                        PrevLayerData[iter][X] = curW;
                    }
                }
            }
        }
        // Feed VWeight into PrevLayerData
        for (int Y=0; Y<NumOutBlocks; ++Y) {
            for (int addrX=0; addrX<InBlockDim; ++addrX) {
                for (int addrY=0; addrY<OutBlockDim; ++addrY) {
                    int iter = InBlockDim*OutBlockDim*NumOutBlocks + Y*InBlockDim*OutBlockDim + addrX*OutBlockDim + addrY;   
                    for (int X=0; X<NumInBlocks; ++X) {
                        double curVW = VW[(X*InBlockDim+addrX)*OutLayerSize + Y*OutBlockDim + addrY];
                        PrevLayerData[iter][X] = curVW;
                    }
                }
            }
        }                
        // Feed PrevLayer into PrevLayerData
        for (int addrY=0; addrY<OutBlockDim; ++addrY) {
            for (int addrX=0; addrX<InBlockDim; ++addrX) {
                int iter = WeightInitCycles + addrY*InBlockDim + addrX;
                for (int X=0; X<NumInBlocks; ++X) {
                    PrevLayerData[iter][X] = y[X*InBlockDim+addrX];
                }
            }
        }        

        // PrevLayerData into Kernel
        List<Bits> PrevLayer = VectorDataGenerator(Def.DataType, PrevLayerData, WeightInitCycles+InBlockDim*OutBlockDim, NumInBlocks);   
        mgr.setInputDataRaw("PrevLayer", PrevLayer);
        

        ///////////////////////// PrevRyLayer /////////////////////////

        // Generate Random PrevRyLayer
        double [] Ry = new double[InLayerSize];
        for (int i=0; i<InLayerSize; ++i) {
            Ry[i] = (ID==0) ? 0 : Math.random();
        }
        
        // Feed Random PrevRyLayer into PrevRyLayerData
        double [][] PrevRyLayerData = new double[InBlockDim*OutBlockDim][NumInBlocks];
        for (int i=0; i<OutBlockDim; ++i) {
            for (int j=0; j<InBlockDim; ++j) {
                int iter = i * InBlockDim + j;
                for (int k=0; k<NumInBlocks; ++k) {
                    PrevRyLayerData[iter][k] = Ry[k*InBlockDim+j];
                }
            }
        }
        
        // Feed PrevRyLayerData into Kernel
        List<Bits> PrevRyLayer = VectorDataGenerator(Def.RGType, PrevRyLayerData, InBlockDim*OutBlockDim, NumInBlocks);
        mgr.setInputDataRaw("PrevRyLayer", PrevRyLayer);
        
        
        ///////////////////////// Bias and VBias /////////////////////////
        
        // Generate Random Bias and VBias
        double []  B = new double[OutLayerSize];
        double [] VB = new double[OutLayerSize];
        for (int i=0; i<OutLayerSize; ++i) {
             B[i] = Math.random();
            VB[i] = Math.random();
        }
        
        // Feed Random Bias and VBias into Kernel
        double [] BiasInitData = new double[2*OutLayerSize];
        for (int i=0; i<OutLayerSize; ++i) BiasInitData[i] = B[i];
        for (int i=0; i<OutLayerSize; ++i) BiasInitData[OutLayerSize+i] = VB[i];
        mgr.setInputData("BiasInitData", BiasInitData);


        ///////////////////////// Expected Output /////////////////////////        

        // Calculate Expected Output
        for (int iter=0; iter<OutBlockDim; ++iter) {
            double []  ExpectedY = new double[NumOutBlocks];
            double [] ExpectedRy = new double[NumOutBlocks];
            for (int Y=0; Y<NumOutBlocks; ++Y) {
                 ExpectedY[Y] =  B[Y*OutBlockDim + iter];
                ExpectedRy[Y] = VB[Y*OutBlockDim + iter];
                for (int row=0; row<InLayerSize; ++row) {
                     ExpectedY[Y] +=  W[row*OutLayerSize + Y*OutBlockDim + iter] *  y[row];
                    ExpectedRy[Y] +=  W[row*OutLayerSize + Y*OutBlockDim + iter] * Ry[row];
                    ExpectedRy[Y] += VW[row*OutLayerSize + Y*OutBlockDim + iter] *  y[row];
                }
                 ExpectedY[Y] = Math.tanh(ExpectedY[Y]);
                ExpectedRy[Y] = ExpectedRy[Y] * (1 - ExpectedY[Y] * ExpectedY[Y]);
            }
            System.out.println("Iter["+iter+"] Y=("+ExpectedY[0]+","+ExpectedY[1]+","+ExpectedY[2]+","+ExpectedY[3]+"), "
                                         + "Ry=("+ExpectedRy[0]+","+ExpectedRy[1]+","+ExpectedRy[2]+","+ExpectedRy[3]+")");
        }


        ///////////////////////// Run Test /////////////////////////

        // Run Test
        mgr.setKernelCycles(numTicks);
        mgr.runTest();    
    
    }
    
    // Input Data Generator
    public static List<Bits> VectorDataGenerator(DFEType Type, double [][] data, int VectorDepth, int VectorWidth) {
        final List<Bits> encodedData = new ArrayList<Bits>(VectorDepth);
        for (int i=0; i<VectorDepth; ++i) {
            Bits thisStepBits = Type.encodeConstant(data[i][0]);
            for (int j=1; j<VectorWidth; ++j){
                thisStepBits = Type.encodeConstant(data[i][j]).cat(thisStepBits);
            }
            encodedData.add(thisStepBits);
        }
        return encodedData;
    }
}
