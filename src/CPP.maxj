import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

import java.lang.Math;

/**
 * Customised Pearlmutter Propagation (CPP): Multiple OddLayer and EvenLayer instances connected together to compute FVP.
 *
 * @author Patrick Shao
 *
 * @param <NumLayers> Number of layers in the network: [Input] --> [Hidden 1] --> [Hidden 2] --> [Output] is 4 layers.
 * @param <LayerSize> Padded Layer Size of each layer in the network
 * @param <NumBlocks> Parallelism Factor in each layer, the vector of that layer's width will be NumBlocks
 * @param <AcFunc> Activation Function of each layer, note that AcFunc[0] is not used as Observation is given
 * @param <NumSamples> Number of samples to process (size of the data set)
 * @param <Observation> Input to the first layer (observation data)
 *                      Note: During Initialisation, Observation is used to stream W and VW for each layer
 * @param <BiasStdInitData> Initialisation Data for Bias, VBias and Std
 *                          Note: BiasStdInitData is Bias and VBias for each layer, to be followed by Std
 * @param <beginInit> begin initialisation. Weight initialisation and bias initialisation happen concurrently.
 *
 */


class CPP extends KernelLib{

    private DFEVar EnObservationInput;
    private DFEVar EnBiasStdInput;
    private DFEVar FVPResult;
    private DFEVar FVPResultValid;
    
    public DFEVar getEnObservationInput()       {return EnObservationInput;}
    public DFEVar getEnBiasStdInput()           {return EnBiasStdInput;}
    public DFEVar getFVPResult()                {return FVPResult;}
    public DFEVar isFVPResultValid()            {return FVPResultValid;}


    CPP(  KernelLib owner,
          int NumLayers,
          int [] LayerSize,
          int [] NumBlocks,
          char [] AcFunc,
          DFEVar NumSamples,
          DFEVector<DFEVar> Observation,
          DFEVar BiasStdInitData,
          DFEVar beginInit)
    {

    super(owner);
    
    /////////////////////// Parameters ///////////////////////
    
    // Argument Check - currently we assume 4 layers:
    // e.g. [Input] --> [Hidden 1] --> [Hidden 2] --> [Output] is 4 layers.    
    if (NumLayers!=4) {
        throw new IllegalArgumentException("[ERROR] Currently we assume 4 layers.");
    }
    if ((LayerSize.length!=NumLayers)||(AcFunc.length!=NumLayers)||(NumBlocks.length!=NumLayers)) {
        throw new IllegalArgumentException("[ERROR] Length of LayerSize, AcFunc and numBlocks must be NumLayers.");
    }
    
    // Buffer Depth
    int BufferDepth = Def.BufferDepth;

    // Calculate BlockDim
    int [] BlockDim = new int[NumLayers];
    for (int i=0; i<NumLayers; ++i) BlockDim[i] = LayerSize[i] / NumBlocks[i];

    // Number of Cycles needed for Forward or Back Propagation for one sample
    // IMPORTANT: By default we assume max(BlockDim[0], BlockDim[2])>=Computation Latency
    if (BlockDim[0]<BlockDim[2]) {
        System.out.println("[Warning] BlockDim[0] = "+BlockDim[0]+", BlockDim[2]="+BlockDim[2]+".");
        System.out.println("[Warning] Better efficiency is achieved when BlockDim[0] >= BlockDim[2].");
        System.out.println("[Warning] Consider changing NumBlocks[] settings to make BlockDim[0] >= BlockDim[2].");
    }
    int MaxBlkDim0Dim2 = Math.max(BlockDim[0], BlockDim[2]);
    int FwdPropCyclesPerSample = BlockDim[0] + (BlockDim[1]-1)*MaxBlkDim0Dim2 + BlockDim[2]*BlockDim[3];
    int BwdPropCyclesPerSample = BlockDim[1]*MaxBlkDim0Dim2 + BlockDim[2]*BlockDim[3];
    int PropCyclesPerSample    = Math.max(FwdPropCyclesPerSample, BwdPropCyclesPerSample);


    /////////////////////// Types ///////////////////////

    // Type of each layer
    DFEVectorType<DFEVar>  Y0_Type = new DFEVectorType<DFEVar>(Def.DataType, NumBlocks[0]);
    DFEVectorType<DFEVar>  Y1_Type = new DFEVectorType<DFEVar>(Def.DataType, NumBlocks[1]);
    DFEVectorType<DFEVar>  Y2_Type = new DFEVectorType<DFEVar>(Def.DataType, NumBlocks[2]);
    DFEVectorType<DFEVar>  Y3_Type = new DFEVectorType<DFEVar>(Def.DataType, NumBlocks[3]);
    DFEVectorType<DFEVar> RG1_Type = new DFEVectorType<DFEVar>(Def.RGType, NumBlocks[1]);
    DFEVectorType<DFEVar> RG2_Type = new DFEVectorType<DFEVar>(Def.RGType, NumBlocks[2]);
    DFEVectorType<DFEVar> RG3_Type = new DFEVectorType<DFEVar>(Def.RGType, NumBlocks[3]);


    /////////////////////// Total Counter ///////////////////////

    // Total Counter
    Count.Params TotalCounterParam = control.count.makeParams(32)
                                                  .withInitValue(0)
                                                  .withWrapMode(WrapMode.STOP_AT_MAX)
                                                  .withReset(beginInit);
    Counter TotalCounter = control.count.makeCounter(TotalCounterParam);
    DFEVar TotalCount = TotalCounter.getCount();


    /////////////////////// Control - Weight Initialisation ///////////////////////
    
    // Parameters
    int FstLayerWeightInitCycles = 2 * BlockDim[0] * LayerSize[1];
    int SndLayerWeightInitCycles = 2 * BlockDim[1] * LayerSize[2];
    int TrdLayerWeightInitCycles = 2 * BlockDim[2] * LayerSize[3];
    int WeightInitCycles = FstLayerWeightInitCycles + SndLayerWeightInitCycles + TrdLayerWeightInitCycles;
    
    // Weight Initialisation Counter
    DFEVar beginWeightInit = beginInit;
    AddrGenerator WeightInitCounter = new AddrGenerator(this, 1, WeightInitCycles, beginWeightInit);
    DFEVar    WeightInitCount = WeightInitCounter.getAddr();
    DFEVar isWeightInitiating = WeightInitCounter.isValid();
    
    // Control Signals for Each Layer
    DFEVar beginWeightInitFstLayer = isWeightInitiating & (WeightInitCount === 0);
    DFEVar beginWeightInitSndLayer = isWeightInitiating & (WeightInitCount === FstLayerWeightInitCycles);
    DFEVar beginWeightInitTrdLayer = isWeightInitiating & (WeightInitCount === FstLayerWeightInitCycles + SndLayerWeightInitCycles);

    // Weight Initialisation Signal - Selection Signal to be used in MUX
    DFEVar isFstLayerWeightInitiating = isWeightInitiating & (WeightInitCount  < FstLayerWeightInitCycles);
    DFEVar isSndLayerWeightInitiating = isWeightInitiating & (WeightInitCount >= FstLayerWeightInitCycles) & 
                                        (WeightInitCount < FstLayerWeightInitCycles + SndLayerWeightInitCycles);
    DFEVar isTrdLayerWeightInitiating = isWeightInitiating & (WeightInitCount >= FstLayerWeightInitCycles + SndLayerWeightInitCycles);


    /////////////////////// Control - Bias and Std Initialisation ///////////////////////

    // Parameters
    int FstLayerBiasInitCycles = 2 * LayerSize[1];
    int SndLayerBiasInitCycles = 2 * LayerSize[2];
    int TrdLayerBiasInitCycles = 2 * LayerSize[3];
    int          StdInitCycles = LayerSize[3];
    int BiasStdInitCycles = FstLayerBiasInitCycles + SndLayerBiasInitCycles + TrdLayerBiasInitCycles + StdInitCycles;
    
    // Bias and Std Initialisation Counter
    DFEVar beginBiasStdInit = beginInit;
    AddrGenerator BiasStdInitCounter = new AddrGenerator(this, 1, BiasStdInitCycles, beginBiasStdInit);
    DFEVar    BiasStdInitCount = BiasStdInitCounter.getAddr();
    DFEVar isBiasStdInitiating = BiasStdInitCounter.isValid();
    
    // Control Signals for Each Layer
    DFEVar beginBiasInitFstLayer = isBiasStdInitiating & (BiasStdInitCount === 0);
    DFEVar beginBiasInitSndLayer = isBiasStdInitiating & (BiasStdInitCount === FstLayerBiasInitCycles);
    DFEVar beginBiasInitTrdLayer = isBiasStdInitiating & (BiasStdInitCount === FstLayerBiasInitCycles + SndLayerBiasInitCycles);
    DFEVar beginStdInit = isBiasStdInitiating & (BiasStdInitCount === FstLayerBiasInitCycles + SndLayerBiasInitCycles + TrdLayerBiasInitCycles);


    /////////////////////// Control - Forward and Backward Propagation ///////////////////////

    // Trigger FVP Calculation when Initialisation finishes
    DFEVar beginFVPCalc = (TotalCount === WeightInitCycles);

    // Inner Loop - Counting the Forward Propagation of a sample
    // Note: When this counter wraps, it means the system is ready to forward propagation a new sample
    //       The back propagation of the current sample is carried out during the forward propagation of the new sample
    Count.Params InnerLoopCounterParam = control.count.makeParams(MathUtils.bitsToAddress(PropCyclesPerSample))
                                                  .withInitValue(0)
                                                  .withMax(PropCyclesPerSample)
                                                  .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                                                  .withReset(beginFVPCalc);
    Counter InnerLoopCounter = control.count.makeCounter(InnerLoopCounterParam);
    DFEVar InnerLoopCount = InnerLoopCounter.getCount();

    // Outer Loop - Counting the number of samples processed
    Count.Params OuterLoopCounterParam = control.count.makeParams(32)
                                                  .withInitValue(0)
                                                  .withEnable(InnerLoopCounter.getWrap())
                                                  .withWrapMode(WrapMode.STOP_AT_MAX)
                                                  .withReset(beginFVPCalc);
    Counter OuterLoopCounter = control.count.makeCounter(OuterLoopCounterParam);
    DFEVar OuterLoopCount = OuterLoopCounter.getCount();

    // Buffer Read and Write Row Address - Swapping Row 0 and Row 1
    Count.Params FwdBufRowAddrCounterParam = control.count.makeParams(2)
                                                  .withInitValue(0)
                                                  .withMax(2)
                                                  .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                                                  .withEnable(InnerLoopCounter.getWrap())
                                                  .withReset(beginFVPCalc);
    Counter FwdBufRowAddrCounter = control.count.makeCounter(FwdBufRowAddrCounterParam);
    DFEVar FwdBufRowAddrCount = FwdBufRowAddrCounter.getCount();
    DFEVar FwdBufRowAddr = FwdBufRowAddrCount.cast(dfeUInt(1));
    DFEVar BwdBufRowAddr = ~FwdBufRowAddr;

    // Control Signal for Forward Propagation
    Count.Params FwdPropCounterParam = control.count.makeParams(32)
                                             .withInitValue(4294967295L)
                                             .withMax(4294967295L)
                                             .withReset(beginFVPCalc)
                                             .withWrapMode(WrapMode.STOP_AT_MAX);
    Counter FwdPropCounter = control.count.makeCounter(FwdPropCounterParam);
    DFEVar FwdPropCount = FwdPropCounter.getCount();
    DFEVar isFwdCalculating = beginFVPCalc | (FwdPropCount>0) & (FwdPropCount<PropCyclesPerSample*NumSamples);
    DFEVar beginFwdProp = (InnerLoopCount === 0) & isFwdCalculating;  

    // Control Signal for Back Propagation
    DFEVar beginBwdPropNextTick = InnerLoopCounter.getWrap() & isFwdCalculating;
    DFEVar beginBwdProp = (TotalCount > WeightInitCycles) & stream.offset(beginBwdPropNextTick, -1);
    
    // Input Control Signal for Observation
    AddrGenerator NewSampleInputCounter = new AddrGenerator(this, 1, BlockDim[0], beginFwdProp);
    DFEVar isStreamingNewSample = NewSampleInputCounter.isValid();    
    EnObservationInput = isWeightInitiating | isStreamingNewSample;

    // Input Control Signal for BiasStdInitData
    EnBiasStdInput = isBiasStdInitiating;
    
    // Trigger Read Back 10 cycles after the Back Propagation of the last sample finishes
    DFEVar beginReadBack = (TotalCount>WeightInitCycles) & (OuterLoopCount === NumSamples+1) & (InnerLoopCount === 10);


    /////////////////////// Control - Read Back ///////////////////////

    // Number of Cycles
    int FstLayerReadBackCycles = LayerSize[0] * LayerSize[1] + LayerSize[1];
    int SndLayerReadBackCycles = LayerSize[1] * LayerSize[2] + LayerSize[2];
    int TrdLayerReadBackCycles = LayerSize[2] * LayerSize[3] + LayerSize[3];
    int   ActualReadBackCycles = FstLayerReadBackCycles + SndLayerReadBackCycles + TrdLayerReadBackCycles;
    int   PaddedReadBackCycles = ((int)Math.ceil((double)ActualReadBackCycles/2))*2;
    
    // Read Back Counter
    AddrGenerator ReadBackCounter = new AddrGenerator(this, 1, PaddedReadBackCycles, beginReadBack);
    DFEVar ReadBackCount = ReadBackCounter.getAddr();
    DFEVar isReadingBack = ReadBackCounter.isValid();
    
    // Begin Signals
    DFEVar beginReadBackFstLayer = beginReadBack;
    DFEVar beginReadBackSndLayer = (ReadBackCount === FstLayerReadBackCycles);
    DFEVar beginReadBackTrdLayer = (ReadBackCount === FstLayerReadBackCycles + SndLayerReadBackCycles);

    // FVP Result Valid
    FVPResultValid = isReadingBack;


    /////////////////////// Input Buffer /////////////////////// 

    // Buffering Observation (y_0) for Forward Propagation and Backward Propagation.
    // In this buffer R/W Port is used for Forward Propagation (Read Address is automatically generated inside)
    // R Port is used for Back Propagation (Need to supply Read Address externally.)
    DFEVar Buffer0WriteAddrRow         = FwdBufRowAddr;
    DFEVar Buffer0beginWrFwdData       = beginFwdProp;
    DFEVar Buffer0BwdReadAddrRow       = BwdBufRowAddr;
    DFEVar Buffer0BwdOffsetReadAddrCol = dfeUInt(Math.max(MathUtils.bitsToAddress(BlockDim[0]),1)).newInstance(this);

    InputBuffer Buffer0 = new InputBuffer(this, BlockDim[0], NumBlocks[0], BufferDepth, Observation, 
                              Buffer0WriteAddrRow, Buffer0beginWrFwdData, Buffer0BwdReadAddrRow, Buffer0BwdOffsetReadAddrCol);
    DFEVector<DFEVar>  y_0 = Buffer0.getFwdData(); 
    DFEVector<DFEVar> Ry_0 = constant.vect(NumBlocks[0], 0);


    /////////////////////// First Layer ///////////////////////

    // First Layer: Layer[0] => Layer[1]
    DFEVar beginFwdPropFst = beginFwdProp;
    DFEVector<DFEVar> y_0_in = Y0_Type.newInstance(this);
    for (int i=0; i<NumBlocks[0]; ++i) {
        y_0_in[i] <== isFstLayerWeightInitiating ? Observation[i] : y_0[i];
    }

    // Inputs for Back Propagation
    int Bwd_Fst_CycleTime = Math.max(BlockDim[0], BlockDim[2]);
    DFEVector<DFEVar> Bwd_y_0_Fst = Buffer0.getBwdData();
    DFEVector<DFEVar> Bwd_y_1     = Y1_Type.newInstance(this);
    DFEVector<DFEVar> Bwd_RG_1    = RG1_Type.newInstance(this);
    DFEVar beginBwdPropFst = dfeUInt(1).newInstance(this);    

    OddLayer FstLayer = new OddLayer(this, 0, AcFunc[1], BlockDim[0], NumBlocks[0], BlockDim[1], NumBlocks[1], Bwd_Fst_CycleTime,
                                     y_0_in, Bwd_y_0_Fst, Ry_0, Bwd_y_1, Bwd_RG_1, BiasStdInitData, beginWeightInitFstLayer,
                                     beginBiasInitFstLayer, beginFwdPropFst, beginBwdPropFst, beginReadBackFstLayer);
    
    // Outputs for Forward Propagation
    DFEVector<DFEVar>  y_1_toBuffer = FstLayer.getY();
    DFEVector<DFEVar> Ry_1_toBuffer = FstLayer.getRy();
    DFEVar FstLayerOutputValid      = FstLayer.isFwdValid();
    DFEVar FstLayerFirstResultReady = FstLayer.isFwdFirstItemReady();
    
    // Outputs for Back Propagation
    Buffer0BwdOffsetReadAddrCol <== FstLayer.getBwdPrevLayerReadOffsetAddr();
    
    // Layer Buffer FwdBuf1: Buffering y_1 and Ry_1
    DFEVar FwdBuf1WriteAddrRow         = FwdBufRowAddr;
    DFEVar FwdBuf1beginWrFwdData       = FstLayerFirstResultReady;
    DFEVar FwdBuf1isFwdDataInValid     = FstLayerOutputValid;
    DFEVar FwdBuf1FwdReadAddrRow       = FwdBufRowAddr;
    DFEVar FwdBuf1FwdOffsetReadAddrCol = dfeUInt(Math.max(MathUtils.bitsToAddress(BlockDim[1]),1)).newInstance(this);
    DFEVar FwdBuf1BwdReadAddrRow       = BwdBufRowAddr;
    DFEVar FwdBuf1BwdOffsetReadAddrCol = dfeUInt(Math.max(MathUtils.bitsToAddress(BlockDim[1]),1)).newInstance(this);
    
    LayerBuffer FwdBuf1 = new LayerBuffer(this, 1, BlockDim[1], NumBlocks[1], BlockDim[1], NumBlocks[1], BufferDepth, 
                                          y_1_toBuffer, Ry_1_toBuffer, FwdBuf1WriteAddrRow, FwdBuf1beginWrFwdData, 
                                          FwdBuf1isFwdDataInValid, FwdBuf1FwdReadAddrRow, FwdBuf1FwdOffsetReadAddrCol,
                                          FwdBuf1BwdReadAddrRow, FwdBuf1BwdOffsetReadAddrCol);
    DFEVector<DFEVar>  y_1 = FwdBuf1.getFwdY();
    DFEVector<DFEVar> Ry_1 = FwdBuf1.getRy();


    /////////////////////// Second Layer ///////////////////////

    // Second Layer: Layer[1] => Layer[2]
    // Remarks: Fwd_Snd_CycleTime = max(BlockDim[0], BlockDim[2], CompLatency) 
    int Fwd_Snd_CycleTime = Math.max(BlockDim[0], BlockDim[2]);
    DFEVar beginFwdPropSnd = FstLayerFirstResultReady;
    DFEVector<DFEVar> y_1_in = Y1_Type.newInstance(this);
    for (int i=0; i<NumBlocks[1]; ++i) {
        y_1_in[i] <== isSndLayerWeightInitiating ? Observation[i] : y_1[i];
    }
    
    // Inputs for Back Propagation
    DFEVector<DFEVar> Bwd_y_1_Snd = FwdBuf1.getBwdY();
    DFEVector<DFEVar> Bwd_y_2     = Y2_Type.newInstance(this);
    DFEVector<DFEVar> Bwd_RG_2    = RG2_Type.newInstance(this);
    DFEVar beginBwdPropSnd        = dfeUInt(1).newInstance(this);

    EvenLayer SndLayer = new EvenLayer(this, 1, AcFunc[2], BlockDim[1], NumBlocks[1], BlockDim[2], NumBlocks[2], Fwd_Snd_CycleTime,
                                           y_1_in, Bwd_y_1_Snd, Ry_1, Bwd_y_2, Bwd_RG_2, BiasStdInitData, beginWeightInitSndLayer,
                                            beginBiasInitSndLayer, beginFwdPropSnd, beginBwdPropSnd, beginReadBackSndLayer);

    // Outputs for Forward Propagation
    DFEVector<DFEVar>  y_2_toBuffer = SndLayer.getY();
    DFEVector<DFEVar> Ry_2_toBuffer = SndLayer.getRy();
    DFEVar SndLayerOutputValid      = SndLayer.isFwdValid();
    DFEVar SndLayerFirstResultReady = SndLayer.isFwdFirstItemReady();
    FwdBuf1FwdOffsetReadAddrCol <== SndLayer.getFwdInputReadOffsetAddr();

    // Outputs for Back Propagation
    DFEVector<DFEVar> Bwd_RG_1_toBuffer = SndLayer.getRG();
    DFEVector<DFEVar> Bwd_y_1_toBuffer  = SndLayer.getBwdYVec();
    FwdBuf1BwdOffsetReadAddrCol         <== SndLayer.getBwdPrevLayerReadOffsetAddr();
    beginBwdPropFst                     <== SndLayer.isBwdFirstItemReady();

    // Layer Buffer FwdBuf2: Buffering y_2 and Ry_2
    DFEVar FwdBuf2WriteAddrRow         = FwdBufRowAddr;
    DFEVar FwdBuf2beginWrFwdData       = SndLayerFirstResultReady;
    DFEVar FwdBuf2isFwdDataInValid     = SndLayerOutputValid;
    DFEVar FwdBuf2FwdReadAddrRow       = FwdBufRowAddr;
    DFEVar FwdBuf2FwdOffsetReadAddrCol = dfeUInt(Math.max(MathUtils.bitsToAddress(BlockDim[2]),1)).newInstance(this);
    DFEVar FwdBuf2BwdReadAddrRow       = BwdBufRowAddr;
    DFEVar FwdBuf2BwdOffsetReadAddrCol = dfeUInt(Math.max(MathUtils.bitsToAddress(BlockDim[2]),1)).newInstance(this);
    
    LayerBuffer FwdBuf2 = new LayerBuffer(this, 2, BlockDim[2], NumBlocks[2], BlockDim[2], NumBlocks[2], BufferDepth, 
                                          y_2_toBuffer, Ry_2_toBuffer, FwdBuf2WriteAddrRow, FwdBuf2beginWrFwdData, 
                                          FwdBuf2isFwdDataInValid, FwdBuf2FwdReadAddrRow, FwdBuf2FwdOffsetReadAddrCol,
                                          FwdBuf2BwdReadAddrRow, FwdBuf2BwdOffsetReadAddrCol);
    DFEVector<DFEVar>  y_2 = FwdBuf2.getFwdY();
    DFEVector<DFEVar> Ry_2 = FwdBuf2.getRy();
    
    // Back Propagation Layer Buffer BwdBuf1: Buffering Bwd_y_1 and Bwd_RG_1
    // Here we are using the forward propagation functionality of the buffer to buffer the back propagation data
    // so dummy input is supplied to the back propagation part    
    DFEVar BwdBuf1WriteAddrRow     = BwdBufRowAddr;
    DFEVar BwdBuf1beginWrBwdData   = SndLayer.isBwdFirstItemReady();
    DFEVar BwdBuf1isBwdDataInValid = SndLayer.isBwdValid();
    DFEVar BwdBuf1BwdReadAddrRow   = BwdBufRowAddr;
    DFEVar BwdBuf1BwdReadAddrCol   = FstLayer.getBwdNextLayerReadOffsetAddr();

    LayerBuffer BwdBuf1 = new LayerBuffer(this, 2, BlockDim[1], NumBlocks[1], BlockDim[1], NumBlocks[1], BufferDepth, 
                                          Bwd_y_1_toBuffer, Bwd_RG_1_toBuffer, BwdBuf1WriteAddrRow, BwdBuf1beginWrBwdData, 
                                          BwdBuf1isBwdDataInValid, BwdBuf1BwdReadAddrRow, BwdBuf1BwdReadAddrCol,
                                          BwdBuf1BwdReadAddrRow, BwdBuf1BwdReadAddrCol);
    Bwd_y_1  <== BwdBuf1.getFwdY();
    Bwd_RG_1 <== BwdBuf1.getRy();    


    /////////////////////// Third Layer ///////////////////////

    // Third Layer: Layer[2] => Layer[3]
    DFEVar beginFwdPropTrd = SndLayerFirstResultReady;
    DFEVector<DFEVar> y_2_in = Y2_Type.newInstance(this);
    for (int i=0; i<NumBlocks[2]; ++i) {
        y_2_in[i] <== isTrdLayerWeightInitiating ? Observation[i] : y_2[i];
    }

    // Inputs for Back Propagation
    int Bwd_Trd_CycleTime = BlockDim[2];
    DFEVector<DFEVar> Bwd_y_2_Trd = FwdBuf2.getBwdY();
    DFEVector<DFEVar> Bwd_y_3     = Y3_Type.newInstance(this);
    DFEVector<DFEVar> Bwd_RG_3    = RG3_Type.newInstance(this);
    DFEVar beginBwdPropTrd        = beginBwdProp;
    
    OddLayer TrdLayer = new OddLayer(this, 2, AcFunc[3], BlockDim[2], NumBlocks[2], BlockDim[3], NumBlocks[3], Bwd_Trd_CycleTime,
                                     y_2_in, Bwd_y_2_Trd, Ry_2, Bwd_y_3, Bwd_RG_3, BiasStdInitData, beginWeightInitTrdLayer,
                                     beginBiasInitTrdLayer, beginFwdPropTrd, beginBwdPropTrd, beginReadBackTrdLayer);

    // Outputs for Forward Propagation
    DFEVector<DFEVar>  y_3_toBuffer = TrdLayer.getY();
    DFEVector<DFEVar> Ry_3_toBuffer = TrdLayer.getRy();
    DFEVar TrdLayerOutputValid      = TrdLayer.isFwdValid();
    DFEVar TrdLayerFirstResultReady = TrdLayer.isFwdFirstItemReady();
    FwdBuf2FwdOffsetReadAddrCol <== TrdLayer.getFwdInputReadOffsetAddr();

    // Outputs for Back Propagation
    DFEVector<DFEVar> Bwd_RG_2_toBuffer = TrdLayer.getRG();
    DFEVector<DFEVar> Bwd_y_2_toBuffer  = TrdLayer.getBwdYVec();
    FwdBuf2BwdOffsetReadAddrCol         <== TrdLayer.getBwdPrevLayerReadOffsetAddr();
    beginBwdPropSnd                     <== TrdLayer.isBwdFirstItemReady();
    
    // Back Propagation Layer Buffer: Buffering Bwd_y_2 and Bwd_RG_2
    // Here we are using the forward propagation functionality of the buffer to buffer the back propagation data
    // so dummy input is supplied to the back propagation part
    DFEVar BwdBuf2WriteAddrRow     = BwdBufRowAddr;
    DFEVar BwdBuf2beginWrBwdData   = TrdLayer.isBwdFirstItemReady();
    DFEVar BwdBuf2isBwdDataInValid = TrdLayer.isBwdValid();
    DFEVar BwdBuf2BwdReadAddrRow   = BwdBufRowAddr;
    DFEVar BwdBuf2BwdReadAddrCol   = SndLayer.getBwdNextLayerReadOffsetAddr();

    LayerBuffer BwdBuf2 = new LayerBuffer(this, 2, BlockDim[2], NumBlocks[2], BlockDim[2], NumBlocks[2], BufferDepth, 
                                          Bwd_y_2_toBuffer, Bwd_RG_2_toBuffer, BwdBuf2WriteAddrRow, BwdBuf2beginWrBwdData, 
                                          BwdBuf2isBwdDataInValid, BwdBuf2BwdReadAddrRow, BwdBuf2BwdReadAddrCol,
                                          BwdBuf2BwdReadAddrRow, BwdBuf2BwdReadAddrCol);
    Bwd_y_2  <== BwdBuf2.getFwdY();
    Bwd_RG_2 <== BwdBuf2.getRy();


    /////////////////////// Back Propagation ///////////////////////

    // Std Block
    DFEVar beginStdRead   = beginFwdPropTrd;
    DFEVar isStdReadValid = TrdLayerOutputValid;
    StdBuffer StdBuff = new StdBuffer(this, BlockDim[3], NumBlocks[3], BiasStdInitData, beginStdInit, beginStdRead, isStdReadValid);
    DFEVector<DFEVar> StdSqInv = StdBuff.getStd();
    
    // Calculate RG_3
    DFEVector<DFEVar> RG_3_toBuffer = StdSqInv.cast(RG3_Type) * Ry_3_toBuffer.cast(RG3_Type);

    // Layer Buffer: Buffering y_3 and RG_3
    // Here we are using the forward propagation functionality of the buffer to buffer the back propagation data
    // so dummy input is supplied to the back propagation part
    DFEVar Buffer3WriteAddrRow         = FwdBufRowAddr;
    DFEVar Buffer3beginWrFwdData       = TrdLayerFirstResultReady;
    DFEVar Buffer3isFwdDataInValid     = TrdLayerOutputValid;
    DFEVar Buffer3BwdReadAddrRow       = BwdBufRowAddr;
    DFEVar Buffer3BwdOffsetReadAddrCol = TrdLayer.getBwdNextLayerReadOffsetAddr();
    
    LayerBuffer Buffer3 = new LayerBuffer(this, 3, BlockDim[3], NumBlocks[3], BlockDim[3], NumBlocks[3], BufferDepth, 
                                          y_3_toBuffer, RG_3_toBuffer, Buffer3WriteAddrRow, Buffer3beginWrFwdData, 
                                          Buffer3isFwdDataInValid, Buffer3BwdReadAddrRow, Buffer3BwdOffsetReadAddrCol,
                                          Buffer3BwdReadAddrRow, Buffer3BwdOffsetReadAddrCol);
    Bwd_y_3  <== Buffer3.getFwdY();
    Bwd_RG_3 <== Buffer3.getRy();


    /////////////////////// Read Back ///////////////////////

    // Read Back Data from Each Layer
    DFEVar FstLayerReadBackData = FstLayer.getRGReadBackData();
    DFEVar SndLayerReadBackData = SndLayer.getRGReadBackData();
    DFEVar TrdLayerReadBackData = TrdLayer.getRGReadBackData();

    // Select Read Back Data
    DFEVar isReadingBackFstLayer = FstLayer.isRGReadBackValid();
    DFEVar isReadingBackSndLayer = SndLayer.isRGReadBackValid();
    DFEVar isReadingBackTrdLayer = TrdLayer.isRGReadBackValid();
    DFEVar ReadBackSel  = isReadingBackTrdLayer.cat(isReadingBackSndLayer.cat(isReadingBackFstLayer));
    DFEVar ReadBackData = control.oneHotMux(ReadBackSel, FstLayerReadBackData, SndLayerReadBackData, TrdLayerReadBackData);

    // Final FVP Result
    // Note: Due to stream padding, host code may need to do de-padding
    FVPResult = ReadBackData;


    /////////////////////// Debug ///////////////////////

/*
    // Tick
    DFEVar Tick = control.count.simpleCounter(32);

    debug.simPrintf(beginInit,     "[%4d] Begin Initialisation...\n", Tick);
    debug.simPrintf(beginFVPCalc,  "[%4d] Begin Fisher Vector Product (FVP) Computation...\n", Tick);
    debug.simPrintf(beginFwdProp,  "[%4d] ---- Begin Fwd Prop Sample [%d] ------------------------------------\n", Tick, OuterLoopCount);
    debug.simPrintf(beginBwdProp,  "[%4d] ------------------------------------ Begin Bwd Prop Sample [%d] ----\n", Tick, OuterLoopCount-1);
    debug.simPrintf(beginReadBack, "[%4d] Begin Reading Back FVP Results...\n", Tick);
*/    
//    debug.simPrintf(TrdLayer.isFwdFirstItemReady(), "[%4d] First Third Layer Forward Propagation Output is ready.\n", Tick);
//    debug.simPrintf(TrdLayer.isFwdValid(), "[%4d] y[0:3]=(%.12f, %.12f, %.12f, %.12f), Ry[0:3]=(%.12f, %.12f, %.12f, %.12f)\n", Tick, y_3_toBuffer[0], y_3_toBuffer[1], y_3_toBuffer[2], y_3_toBuffer[3], Ry_3_toBuffer[0], Ry_3_toBuffer[1], Ry_3_toBuffer[2], Ry_3_toBuffer[3]);
    
    
    // Back Propagation Results
//    debug.simPrintf(beginBwdPropTrd, "[%4d] Begin Third Layer Back Propagation...\n", Tick);
//    debug.simPrintf(TrdLayer.isBwdValid(), "[%4d] RG_2[0:3]=(%.12f, %.12f, %.12f, %.12f)\n", Tick, Bwd_RG_2_toBuffer[0], Bwd_RG_2_toBuffer[1], Bwd_RG_2_toBuffer[2], Bwd_RG_2_toBuffer[3]);

//    debug.simPrintf(beginBwdPropSnd, "[%4d] Begin Second Layer Back Propagation...\n", Tick);
//    debug.simPrintf(SndLayer.isBwdValid(), "[%4d] RG_1[0:3]=(%.12f, %.12f, %.12f, %.12f), y_1[0:3]=(%.12f, %.12f, %.12f, %.12f)\n", Tick, Bwd_RG_1_toBuffer[0], Bwd_RG_1_toBuffer[1], Bwd_RG_1_toBuffer[2], Bwd_RG_1_toBuffer[3], Bwd_y_1_toBuffer[0], Bwd_y_1_toBuffer[1], Bwd_y_1_toBuffer[2], Bwd_y_1_toBuffer[3]);

//    DFEVector<DFEVar> RG_0 = FstLayer.getRG();
//    debug.simPrintf(FstLayer.isBwdValid(), "[%4d] RG_0[0:3]=(%.12f, %.12f, %.12f, %.12f)\n", Tick, RG_0[0], RG_0[1], RG_0[2], RG_0[3]);

    // Read Back
//    debug.simPrintf(isReadingBack, "[%4d] FVPResult[%4d] | FstValid=%d, SndValid=%d, TrdValid=%d, ReadBackSel=%d | [Fst|Snd|Trd]=%f, %f, %f | FVPResult=%.12f\n", Tick, ReadBackCount, isReadingBackFstLayer, isReadingBackSndLayer, isReadingBackTrdLayer, ReadBackSel, FstLayerReadBackData, SndLayerReadBackData, TrdLayerReadBackData, FVPResult);


    }
}
