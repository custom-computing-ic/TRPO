import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem.RamWriteMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

import maxpower.KernelBinaryOp.Add;
import maxpower.TreeReduce;

/**
 * A EVEN layer of both forward propagation and back propagation
 *
 * @author Patrick Shao
 *
 * @param <ID> The ID of this Layer
 * @param <AcFunc> Activation Function of this Layer
 * @param <InBlockDim> Block Dimension of the Input Vector
 * @param <NumInBlocks> Number of Input Blocks => InputDim = InBlockDim * NumInBlocks
 * @param <OutBlockDim> Block Dimension of the Output Vector
 * @param <NumOutBlocks> Number of Output Blocks => OutputDim = OutBlockDim * NumOutBlocks
 * @param <OutBlockDimCycleTime> Number of cycles needed for each inner loop, see description below
 *                               Note: a) A new vector comes every InputLatency cycles.
 *                                     b) In each inner loop there are OutBlockDim items to process.
 *                                     c) The computation latency within this block is CompLatency cycles.
 *                                        This can be checked with stream offset value
 *                                     ==> OutBlockDimCycleTime = max(InputLatency, OutBlockDim, CompLatency)
 *                                     TotalNumCycles = OutBlockDimCycleTime * InBlockDim
 * @param <FwdPrevLayer> y values of previous layer, width should be NumInBlocks.
 *                       Iterating every cycle during computation, using InBlockDim cycles to finish 1 Input Vector
 *                       Note: during initialisation, PrevLayer is used to stream in W and VW.
 * @param <BwdPrevLayer> y values of previous layer, width should be NumInBlocks.
 *                       Iterating every outer iteration.
 * @param <FwdPrevRyLayer> Ry values of previous layer, width should be NumInBlocks
 *                         Iterating every cycle during computation, using InBlockDim cycles to finish 1 Input Vector
 * @param <BwdNextLayer> y values from next layer, width should be NumOutBlocks.
 *                       Iterating every cycle during back propagation.
 * @param <BwdNextRGLayer> Incoming RGLayer values, width should be NumOutBlocks.
 *                         Iterating every cycle during back propagation. 
 * @param <BiasInitData> Initialisation Data for Bias and VBias
 * @param <beginWeightInit> begin Weight Initialisation - using FwdPrevLayer to stream in W and VW
 * @param <beginBiasInit> begin Bias Initialisation - using BiasInitData to stream in B and VB
 * @param <beginFwdProp> begin forward propagation
 * @param <beginBwdProp> begin back propagation
 * @param <beginReadBack> begin read back RGW and RGB, which are the fisher vector product
 * 
 */

class MidLayer extends KernelLib{

    private DFEVector<DFEVar> YVec;
    private DFEVector<DFEVar> RyVec;
    private DFEVector<DFEVar> RGVec;
    private DFEVector<DFEVar> BwdYVec;    
    private DFEVar FwdInputReadOffsetAddr;
    private DFEVar FwdFirstItemReady;
    private DFEVar FwdValid;
    private DFEVar BwdNextLayerReadOffsetAddr;
    private DFEVar BwdPrevLayerReadOffsetAddr;
    private DFEVar BwdFirstItemReady;
    private DFEVar BwdValid;
    private DFEVar RGReadBackData;
    private DFEVar RGReadBackValid;
		
    public DFEVector<DFEVar> getY()                     {return YVec;}
    public DFEVector<DFEVar> getRy()                    {return RyVec;}
    public DFEVector<DFEVar> getRG()                    {return RGVec;}
    public DFEVector<DFEVar> getBwdYVec()               {return BwdYVec;}    
    public DFEVar getFwdInputReadOffsetAddr()           {return FwdInputReadOffsetAddr;}
    public DFEVar isFwdFirstItemReady()                 {return FwdFirstItemReady;}
    public DFEVar isFwdValid()                          {return FwdValid;}
    public DFEVar getBwdNextLayerReadOffsetAddr()       {return BwdNextLayerReadOffsetAddr;}
    public DFEVar getBwdPrevLayerReadOffsetAddr()       {return BwdPrevLayerReadOffsetAddr;}
    public DFEVar isBwdFirstItemReady()                 {return BwdFirstItemReady;}
    public DFEVar isBwdValid()                          {return BwdValid;}
    public DFEVar getRGReadBackData()                   {return RGReadBackData;}
    public DFEVar isRGReadBackValid()                   {return RGReadBackValid;}

	
    MidLayer(   KernelLib owner,
                int ID,
                char AcFunc,
                int InBlockDim,
                int NumInBlocks,
                int OutBlockDim,
                int NumOutBlocks,
                int OutBlockDimCycleTime,
                DFEVector<DFEVar> FwdPrevLayer,
                DFEVector<DFEVar> BwdPrevLayer,
                DFEVector<DFEVar> FwdPrevRyLayer,
                DFEVector<DFEVar> BwdNextLayer,
                DFEVector<DFEVar> BwdNextRGLayer,                
                DFEVar BiasInitData,
                DFEVar beginWeightInit,
                DFEVar beginBiasInit,
                DFEVar beginFwdProp,
                DFEVar beginBwdProp,
                DFEVar beginReadBack)
    {

    super(owner);
    
    /////////////////////// Data Types ///////////////////////
    
    int BlockSize = InBlockDim*OutBlockDim;
    DFEVectorType<DFEVar>  InVecType = new DFEVectorType<DFEVar>(Def.DataType, NumInBlocks);
    DFEVectorType<DFEVar> OutVecType = new DFEVectorType<DFEVar>(Def.DataType, NumOutBlocks);
    DFEVectorType<DFEVector<DFEVar>> FwdGridVecType = new DFEVectorType<DFEVector<DFEVar>>(InVecType, NumOutBlocks);
    DFEVectorType<DFEVector<DFEVar>> BwdGridVecType = new DFEVectorType<DFEVector<DFEVar>>(OutVecType, NumInBlocks);
    DFEType AddrType = dfeUInt(MathUtils.bitsToAddress(BlockSize));



    /*************************************************************************************
    *                             Control - Initialisation                               *
    *************************************************************************************/



    /////////////////////// Address Generation - Weight Initialisation ///////////////////////

    // Cycle                  0*BlockSize ~                  BlockSize - 1 for Weight X[:]Y[0]
    // Cycle                  1*BlockSize ~                2*BlockSize - 1 for Weight X[:]Y[1]
    // ...
    // Cycle   (NumOutBlocks-1)*BlockSize ~     NumOutBlocks*BlockSize - 1 for Weight X[:]Y[NumOutBlocks-1]
    
    // Cycle       NumOutBlocks*BlockSize ~ (NumOutBlocks+1)*BlockSize - 1 for V Weight X[:]Y[0]
    // Cycle   (NumOutBlocks+1)*BlockSize ~ (NumOutBlocks+2)*BlockSize - 1 for V Weight X[:]Y[1]
    // ...
    // Cycle (2*NumOutBlocks-1)*BlockSize ~ (2*NumOutBlocks)*BlockSize - 1 for V Weight X[:]Y[NumOutBlocks-1]
    

    // Reset Signal for Initialisation
    DFEVar WeightInitReset = beginWeightInit;

    // Top Level Control
    AddrGenerator InitCounter = new AddrGenerator(owner, 1, 2*NumOutBlocks*BlockSize, WeightInitReset);
    DFEVar InitCount = InitCounter.getAddr();
    DFEVar isInit    = InitCounter.isValid();
    DFEVar isInitW   = isInit & (InitCount <  NumOutBlocks*BlockSize);
    DFEVar isInitVW  = isInit & (InitCount >= NumOutBlocks*BlockSize);
    
    // InitWPortAddr - Initialisation using R/W port
    Count.Params InitWPortAddrCounterParam = control.count.makeParams(MathUtils.bitsToAddress(BlockSize))
                                                  .withInitValue(0)
                                                  .withMax(BlockSize)
                                                  .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                                                  .withReset(WeightInitReset);
    Counter InitWPortAddrCounter = control.count.makeCounter(InitWPortAddrCounterParam);
    DFEVar InitWPortAddr = InitWPortAddrCounter.getCount();

    // InitWYCount - to Select the block to write according to Y
    Count.Params InitWYCounterParam = control.count.makeParams(MathUtils.bitsToAddress(NumOutBlocks))
                                                  .withInitValue(0)
                                                  .withMax(NumOutBlocks)
                                                  .withEnable(InitWPortAddrCounter.getWrap())
                                                  .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                                                  .withReset(WeightInitReset);
    Counter InitWYCounter = control.count.makeCounter(InitWYCounterParam);
    DFEVar InitWYCount = InitWYCounter.getCount();


    /////////////////////// Address Generation - Bias Initialisation ///////////////////////

    // BiasReset Signal for Initialisation
    DFEVar BiasInitReset = beginBiasInit;

    // Top Level Control
    AddrGenerator BiasInitCounter = new AddrGenerator(owner, 1, 2*NumOutBlocks*OutBlockDim, BiasInitReset);
    DFEVar BiasInitCount = BiasInitCounter.getAddr();
    DFEVar isBiasInit    = BiasInitCounter.isValid();
    DFEVar isInitB       = isBiasInit & (BiasInitCount <  NumOutBlocks*OutBlockDim);
    DFEVar isInitVB      = isBiasInit & (BiasInitCount >= NumOutBlocks*OutBlockDim);
    
    // InitBPortAddr - Initialisation using R/W port
    Count.Params InitBPortAddrCounterParam = control.count.makeParams(MathUtils.bitsToAddress(OutBlockDim))
                                                  .withInitValue(0)
                                                  .withMax(OutBlockDim)
                                                  .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                                                  .withReset(BiasInitReset);
    Counter InitBPortAddrCounter = control.count.makeCounter(InitBPortAddrCounterParam);
    DFEVar InitBPortAddr = InitBPortAddrCounter.getCount();

    // BYCount - to Select the block to write according to Y
    Count.Params InitBYCounterParam = control.count.makeParams(MathUtils.bitsToAddress(NumOutBlocks))
                                                  .withInitValue(0)
                                                  .withMax(NumOutBlocks)
                                                  .withEnable(InitBPortAddrCounter.getWrap())
                                                  .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                                                  .withReset(BiasInitReset);
    Counter InitBYCounter = control.count.makeCounter(InitBYCounterParam);
    DFEVar InitBYCount = InitBYCounter.getCount();



    /*************************************************************************************
    *                            Control - Forward Propagation                           *
    *************************************************************************************/



    /////////////////////// Address Generation - Forward Propagation ///////////////////////

    // Counter Reset
    DFEVar FwdReset = beginFwdProp;

    // Top Level Control
    AddrGenerator FwdCounter = new AddrGenerator(owner, 1, OutBlockDimCycleTime*InBlockDim, FwdReset);
    DFEVar isFwdCalculating = FwdCounter.isValid();
    
    // Begin New Row
    Count.Params NewRowCounterParam = control.count.makeParams(16)
                                                   .withInitValue(0)
                                                   .withMax(OutBlockDimCycleTime)
                                                   .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                                                   .withReset(FwdReset);
    Counter NewRowCounter = control.count.makeCounter(NewRowCounterParam);
    DFEVar beginNewRow = (NewRowCounter.getCount() === 0) & isFwdCalculating;

    // Col Address in OutBlockDim domain - to be used by Weight, Bias and Temp Result
    AddrGenerator FwdColAddrCounter = new AddrGenerator(owner, 1, OutBlockDim, beginNewRow);
    DFEVar FwdColAddr = FwdColAddrCounter.getAddr();
    DFEVar FwdColAddrValid = FwdColAddrCounter.isValid() & isFwdCalculating;

    // Row Address in InBlockDim domain - to be used by Weight
    DFEVar FwdIncRowAddrNextTick = NewRowCounter.getWrap();
    AddrGenerator FwdRowAddrCounter = new AddrGenerator(owner, 1, InBlockDim, FwdReset, FwdIncRowAddrNextTick);
    DFEVar FwdRowAddr = FwdRowAddrCounter.getAddr();
    DFEVar isFirstRow = (FwdRowAddr === 0);

    // Weight Read Address
    DFEVar FwdWReadAddr = FwdRowAddr.cast(AddrType) * OutBlockDim + FwdColAddr.cast(AddrType);
    
    // Offset Read Address for the Input Vector - for previous LayerBuffer
    FwdInputReadOffsetAddr = FwdRowAddr;

    // The first item of the result is ready at the beginning of the last iteration
    FwdFirstItemReady = (FwdRowAddr === InBlockDim-1) & beginNewRow & isFwdCalculating;

    // Is Fwd Output Valid
    FwdValid = (FwdRowAddr === InBlockDim-1) & FwdColAddrValid;



    /*************************************************************************************
    *                             Control - Back Propagation                             *
    *************************************************************************************/



    /////////////////////// Address Generation - Back Propagation ///////////////////////

    // Counter Reset
    DFEVar BwdReset = beginBwdProp;

    // Top Level Control
    AddrGenerator BwdCounter = new AddrGenerator(owner, 1, BlockSize, BwdReset);
    DFEVar BwdCount = BwdCounter.getAddr();
    DFEVar isBwdCalculating = BwdCounter.isValid();

    // Col Address in OutBlockDim domain - to be used by Weight, Bias and Temp Result
    Count.Params BwdColAddrCounterParam = control.count.makeParams(MathUtils.bitsToAddress(OutBlockDim))
                                                  .withInitValue(0)
                                                  .withMax(OutBlockDim)
                                                  .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                                                  .withReset(BwdReset);
    Counter BwdColAddrCounter = control.count.makeCounter(BwdColAddrCounterParam);
    DFEVar BwdColAddr = BwdColAddrCounter.getCount();

    // Row Address in InBlockDim domain - to be used by Weight, Bias and Temp Result
    Count.Params BwdRowAddrCounterParam = control.count.makeParams(MathUtils.bitsToAddress(InBlockDim))
                                                  .withInitValue(0)
                                                  .withMax(InBlockDim)
                                                  .withEnable(BwdColAddrCounter.getWrap())
                                                  .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                                                  .withReset(BwdReset);
    Counter BwdRowAddrCounter = control.count.makeCounter(BwdRowAddrCounterParam);
    DFEVar BwdRowAddr = BwdRowAddrCounter.getCount();

    // Read Address - horizontal in our case
    DFEVar BwdWReadAddr = BwdRowAddr.cast(AddrType) * OutBlockDim + BwdColAddr.cast(AddrType);

    // Offset Read Address for the BwdNextLayer Vector
    BwdNextLayerReadOffsetAddr = BwdColAddr;
    
    // Offset Read Address for the BwdPrevLayer Vector
    BwdPrevLayerReadOffsetAddr = BwdRowAddr;
    
    // The first item of the result is ready at the end of the first iteration
    BwdFirstItemReady = isBwdCalculating & BwdColAddrCounter.getWrap() & (BwdRowAddr === 0);
    
    // The result is valid on the last cycle of each inner loop iteration
    BwdValid = isBwdCalculating & BwdColAddrCounter.getWrap();

    // RGW Update is valid during Back Propagation
    DFEVar isRGWUpdating = isBwdCalculating;

    // RGB Update is valid on the first inner loop
    DFEVar isRGBUpdating = isBwdCalculating & (BwdCount < OutBlockDim);



    /*************************************************************************************
    *                                Control - Read Back                                 *
    *************************************************************************************/



    /////////////////////// Address Generation - Read Back ///////////////////////

    // Number of Cycles Needed
    int RGWReadBackCycles = BlockSize * NumInBlocks * NumOutBlocks;
    int RGBReadBackCycles = OutBlockDim * NumOutBlocks;
    int ReadBackCycles    = RGWReadBackCycles + RGBReadBackCycles;

    // RG Read Back Reset
    DFEVar RGReadBackReset = beginReadBack;

    // Top Level Control    
    AddrGenerator ReadBackCounter = new AddrGenerator(owner, 1, ReadBackCycles, RGReadBackReset);
    DFEVar ReadBackCount     = ReadBackCounter.getAddr();
    DFEVar isReadingBack     = ReadBackCounter.isValid();
    DFEVar isReadingBackRGW  = (ReadBackCount < RGWReadBackCycles) & isReadingBack;

    // RG Read Column Offset Address - For RGW and RGB
    Count.Params RGReadColOffsetAddrCounterParam = control.count.makeParams(MathUtils.bitsToAddress(OutBlockDim))
                                                            .withInitValue(0)
                                                            .withMax(OutBlockDim)
                                                            .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                                                            .withReset(RGReadBackReset);
    Counter RGReadColOffsetAddrCounter = control.count.makeCounter(RGReadColOffsetAddrCounterParam);
    DFEVar RGReadColOffsetAddr = RGReadColOffsetAddrCounter.getCount();

    // RG Read Column Base Address - For RGW and RGB
    Count.Params RGReadColBaseAddrCounterParam = control.count.makeParams(MathUtils.bitsToAddress(NumOutBlocks))
                                                            .withInitValue(0)
                                                            .withMax(NumOutBlocks)
                                                            .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                                                            .withEnable(RGReadColOffsetAddrCounter.getWrap())
                                                            .withReset(RGReadBackReset);
    Counter RGReadColBaseAddrCounter = control.count.makeCounter(RGReadColBaseAddrCounterParam);
    DFEVar RGReadColBaseAddr = RGReadColBaseAddrCounter.getCount();
    
    // RG Read Row Offset Address - For RGW
    Count.Params RGReadRowOffsetAddrCounterParam = control.count.makeParams(MathUtils.bitsToAddress(InBlockDim))
                                                            .withInitValue(0)
                                                            .withMax(InBlockDim)
                                                            .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                                                            .withEnable(RGReadColBaseAddrCounter.getWrap())
                                                            .withReset(RGReadBackReset);
    Counter RGReadRowOffsetAddrCounter = control.count.makeCounter(RGReadRowOffsetAddrCounterParam);
    DFEVar RGReadRowOffsetAddr = RGReadRowOffsetAddrCounter.getCount();

    // RG Read Row Base Address - For RGW
    Count.Params RGReadRowBaseAddrCounterParam = control.count.makeParams(MathUtils.bitsToAddress(NumInBlocks))
                                                            .withInitValue(0)
                                                            .withMax(NumInBlocks)
                                                            .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                                                            .withEnable(RGReadRowOffsetAddrCounter.getWrap())
                                                            .withReset(RGReadBackReset);
    Counter RGReadRowBaseAddrCounter = control.count.makeCounter(RGReadRowBaseAddrCounterParam);
    DFEVar RGReadRowBaseAddr = RGReadRowBaseAddrCounter.getCount();
    
    // RGW Read Back Addr
    DFEVar RGWReadBackAddr = RGReadRowOffsetAddr.cast(AddrType) * OutBlockDim + RGReadColOffsetAddr.cast(AddrType);

    // RGB Read Back Addr
    DFEVar RGBReadBackAddr = RGReadColOffsetAddr;
    
    // Read Back Valid
    RGReadBackValid = isReadingBack;



    /*************************************************************************************
    *                                  Overall Control                                   *
    *************************************************************************************/



    DFEVar WPortAddr = isInit ? InitWPortAddr : BwdWReadAddr;
    DFEVar WReadAddr = FwdWReadAddr;
    DFEVar BPortAddr = InitBPortAddr;
    DFEVar BReadAddr = FwdColAddr;
    
    DFEVar RGWReadAddr = isReadingBack ? RGWReadBackAddr : BwdWReadAddr;
    DFEVar RGBReadAddr = isReadingBack ? RGBReadBackAddr : BwdColAddr;



    /*************************************************************************************
    *                                 Memory Allocation                                  *
    *************************************************************************************/



    /////////////////////// Memory Allocation ///////////////////////

    // Weight and VWeight Memory Blocks
    DFEVector<DFEVector<DFEVar>>  FwdWGridVec = FwdGridVecType.newInstance(this);
    DFEVector<DFEVector<DFEVar>>  BwdWGridVec = BwdGridVecType.newInstance(this);
    DFEVector<DFEVector<DFEVar>> FwdVWGridVec = FwdGridVecType.newInstance(this);
    for (int X=0; X<NumInBlocks; ++X) {
        for (int Y=0; Y<NumOutBlocks; ++Y) {
            // W Block
            Memory<DFEVar> WBlock = mem.alloc(Def.DataType, BlockSize);
            BwdWGridVec[X][Y] <== WBlock.port(WPortAddr, FwdPrevLayer[X], isInitW & (Y===InitWYCount), RamWriteMode.WRITE_FIRST);
            FwdWGridVec[Y][X] <== WBlock.read(WReadAddr);
            // VW Block
            Memory<DFEVar> VWBlock = mem.alloc(Def.DataType, BlockSize);
            VWBlock.port(WPortAddr, FwdPrevLayer[X], isInitVW & (Y===InitWYCount), RamWriteMode.WRITE_FIRST);
            FwdVWGridVec[Y][X] <== VWBlock.read(WReadAddr);
        }
    }

    // Bias and VBias Memory Blocks
    DFEVector<DFEVar>  Bias = OutVecType.newInstance(this);
    DFEVector<DFEVar> VBias = OutVecType.newInstance(this);
    for (int Y=0; Y<NumOutBlocks; ++Y) {
        // B Block
        Memory<DFEVar> BBlock = mem.alloc(Def.DataType, OutBlockDim);
        BBlock.port(BPortAddr, BiasInitData, isInitB & (Y===InitBYCount), RamWriteMode.WRITE_FIRST);
        Bias[Y] <== BBlock.read(BReadAddr);
        // VB Block
        Memory<DFEVar> VBBlock = mem.alloc(Def.DataType, OutBlockDim);
        VBBlock.port(BPortAddr, BiasInitData, isInitVB & (Y===InitBYCount), RamWriteMode.WRITE_FIRST);
        VBias[Y] <== VBBlock.read(BReadAddr);
    }

    // RGW Memory Blocks
    DFEVector<DFEVector<DFEVar>> BwdRGWRdGridVec = BwdGridVecType.newInstance(this);
    DFEVector<DFEVector<DFEVar>> BwdRGWWrGridVec = BwdGridVecType.newInstance(this);
    DFEVar BwdRGWWrAddr = dfeUInt(MathUtils.bitsToAddress(BlockSize)).newInstance(this);
    DFEVar BwdRGWWrEn   = dfeUInt(1).newInstance(this);
    for (int X=0; X<NumInBlocks; ++X) {
        for (int Y=0; Y<NumOutBlocks; ++Y) {
            // RGW Block
            Memory<DFEVar> RGWBlock = mem.alloc(Def.DataType, BlockSize);
            RGWBlock.port(BwdRGWWrAddr, BwdRGWWrGridVec[X][Y], BwdRGWWrEn, RamWriteMode.WRITE_FIRST);
            BwdRGWRdGridVec[X][Y] <== RGWBlock.read(RGWReadAddr);
        }
    }
    
    // RGB Memory Blocks
    DFEVector<DFEVar> BwdRGBRead  = OutVecType.newInstance(this);
    DFEVector<DFEVar> BwdRGBWrite = OutVecType.newInstance(this);
    DFEVar BwdRGBWrAddr = dfeUInt(MathUtils.bitsToAddress(OutBlockDim)).newInstance(this);
    DFEVar BwdRGBWrEn   = dfeUInt(1).newInstance(this);
    for (int Y=0; Y<NumOutBlocks; ++Y) {
        // RGB Block
        Memory<DFEVar> RGBBlock = mem.alloc(Def.DataType, OutBlockDim);
        RGBBlock.port(BwdRGBWrAddr, BwdRGBWrite[Y], BwdRGBWrEn, RamWriteMode.WRITE_FIRST);
        BwdRGBRead[Y] <== RGBBlock.read(RGBReadAddr);
    }



    /*************************************************************************************
    *                                    Calculation                                     *
    *************************************************************************************/



    /////////////////////// Calculation - Forward Propagation ///////////////////////

    // Calculate Pre-activated Y and Ry
    // TODO: Optimise bit width to avoid overflow
    DFEVector<DFEVar> Temp_y  = OutVecType.newInstance(this);
    DFEVector<DFEVar> Temp_Ry = OutVecType.newInstance(this);
    DFEVector<DFEVar> NewPreAc_y  = OutVecType.newInstance(this);
    DFEVector<DFEVar> NewPreAc_Ry = OutVecType.newInstance(this);
    for (int Y=0; Y<NumOutBlocks; ++Y) {
        DFEVector<DFEVar> mult_y  =   FwdPrevLayer * FwdWGridVec[Y];
        DFEVector<DFEVar> mult_Ry = FwdPrevRyLayer * FwdWGridVec[Y] + FwdPrevLayer * FwdVWGridVec[Y];
        DFEVar MultAdd_y  = TreeReduce.reduce(new Add<DFEVar>(), mult_y.getElementsAsList());
        DFEVar MultAdd_Ry = TreeReduce.reduce(new Add<DFEVar>(), mult_Ry.getElementsAsList());
        NewPreAc_y[Y]  <== MultAdd_y  + (isFirstRow ?  Bias[Y] : Temp_y[Y]);
        NewPreAc_Ry[Y] <== MultAdd_Ry + (isFirstRow ? VBias[Y] : Temp_Ry[Y]);
    }

    // Prepare Write Back Data
    OffsetExpr Offset_y  = stream.makeOffsetAutoLoop("MidLayer"+ID+"Offset_y");
    OffsetExpr Offset_Ry = stream.makeOffsetAutoLoop("MidLayer"+ID+"Offset_Ry");
     
    DFEVector<DFEVar> TempWrData_y = OutVecType.newInstance(this);
    DFEVector<DFEVar> TempWrData_Ry = OutVecType.newInstance(this);
    for (int Y=0; Y<NumOutBlocks; ++Y) {
        TempWrData_y[Y]  <== stream.offset(NewPreAc_y[Y],  -Offset_y);
        TempWrData_Ry[Y] <== stream.offset(NewPreAc_Ry[Y], -Offset_Ry);
    }
    DFEVar TempWrAddr_y  = stream.offset(FwdColAddr, -Offset_y);
    DFEVar TempWrAddr_Ry = stream.offset(FwdColAddr, -Offset_Ry);
    DFEVar TempWrEn_y    = stream.offset(FwdColAddrValid, -Offset_y);
    DFEVar TempWrEn_Ry   = stream.offset(FwdColAddrValid, -Offset_Ry);


    // Temp Result of y and Ry
    for (int Y=0; Y<NumOutBlocks; ++Y) {
        // Temp y
        Memory<DFEVar> BRAM_y = mem.alloc(Def.DataType, OutBlockDim);
        Temp_y[Y] <== BRAM_y.read(FwdColAddr);
        BRAM_y.port(TempWrAddr_y, TempWrData_y[Y], TempWrEn_y, RamWriteMode.WRITE_FIRST);
        // Temp Ry
        Memory<DFEVar> BRAM_Ry = mem.alloc(Def.DataType, OutBlockDim);
        Temp_Ry[Y] <== BRAM_Ry.read(FwdColAddr);
        BRAM_Ry.port(TempWrAddr_Ry, TempWrData_Ry[Y], TempWrEn_Ry, RamWriteMode.WRITE_FIRST);
    }


    // Apply Activation Function
    YVec  = OutVecType.newInstance(this);
    RyVec = OutVecType.newInstance(this);
    for (int Y=0; Y<NumOutBlocks; ++Y) {
        switch (AcFunc) {
            case 't': {
                DFEVar Activated_y = tanh(NewPreAc_y[Y]);
                 YVec[Y] <== Activated_y;
                RyVec[Y] <== NewPreAc_Ry[Y] * (1-Activated_y) * (1+Activated_y);
                break;
            }
            case 'l': {
                 YVec[Y] <== NewPreAc_y[Y];
                RyVec[Y] <== NewPreAc_Ry[Y];
                break;
            }
            default: {
                throw new IllegalArgumentException("MidLayer["+ID+"]: Activation Function "+AcFunc+" unsupported.");
			}
        }
    }

/*
    // For Simulation
    debug.simPrintf(WeightInitReset, "[%4d] Layer[%d] Begin Init Weights...\n", control.count.simpleCounter(32), ID);
    debug.simPrintf(BiasInitReset, "[%4d] Layer[%d] Begin Init Bias...\n", control.count.simpleCounter(32), ID);
    debug.simPrintf(FwdValid, "[%4d] W[%2d][%2d] RdAddr=%2d | Y[0:3][%2d]=(%.12f,%.12f,%.12f,%.12f), Ry[0:3][%2d]=(%.12f,%.12f,%.12f,%.12f), Valid=%d\n", control.count.simpleCounter(32), FwdRowAddr, FwdColAddr, WReadAddr, FwdColAddr, YVec[0], YVec[1], YVec[2], YVec[3], FwdColAddr, RyVec[0], RyVec[1], RyVec[2], RyVec[3], FwdValid);
*/

/*
    // For jUnit Tests
    debug.simPrintf(FwdColAddrValid, "[%3d] W[%d][%d]=[%.2f, %.2f, %.2f, %.2f], IN=[%.2f, %.2f, %.2f, %.2f], Bias[%d]=%.2f, Temp[%d]=>%2.6f | PreAc_y[0]=%2.6f => y_0=%f, Valid=%d\n", control.count.simpleCounter(32), FwdRowAddr, FwdColAddr, FwdWGridVec[0][0], FwdWGridVec[0][1], FwdWGridVec[0][2], FwdWGridVec[0][3], FwdPrevLayer[0], FwdPrevLayer[1], FwdPrevLayer[2], FwdPrevLayer[3], FwdColAddr, Bias[0], FwdColAddr, Temp_y[0], NewPreAc_y[0], YVec[0], FwdValid);
*/



    /////////////////////// Calculation - Backward Propagation ///////////////////////

    // Bypass Prev Y Layer to output
    BwdYVec = BwdPrevLayer;

    // Accumulator Parameter
    Accumulator.Params BwdAccParam = Reductions.accumulator.makeAccumulatorConfig(Def.DataType)
                                                     .withEnable(isBwdCalculating)
                                                     .withClear(stream.offset(BwdColAddr, 1)===0);

    // De-Activation
    DFEVector<DFEVar> RGLayer = OutVecType.newInstance(this);
    for (int Y=0; Y<NumOutBlocks; ++Y) {
        switch (AcFunc) {
            case 't': {RGLayer[Y] <== BwdNextRGLayer[Y] * (1-BwdNextLayer[Y]*BwdNextLayer[Y]); break;}
            case 'l': {RGLayer[Y] <== BwdNextRGLayer[Y]; break;}
            default: {throw new IllegalArgumentException("Layer["+ID+"]: Activation Function "+AcFunc+" unsupported.");}    
        }
    }

    // Calculate RGVec when this layer isn't first layer
    // TODO: Optimise bit width to avoid overflow
    RGVec = InVecType.newInstance(this);
    DFEVector<DFEVar> thisStepMult = InVecType.newInstance(this);  // For Debug
    if (ID==0) {
        for (int X=0; X<NumInBlocks; ++X) RGVec[X] <== constant.var(Def.DataType, 0);
    }
    else {
        for (int X=0; X<NumInBlocks; ++X) {
            DFEVector<DFEVar> mult_RG = RGLayer * BwdWGridVec[X];
            DFEVar toAccumulator_RG = TreeReduce.reduce(new Add<DFEVar>(), mult_RG.getElementsAsList());
            DFEVar sum_RG = Reductions.accumulator.makeAccumulator(toAccumulator_RG, BwdAccParam);
            RGVec[X] <== sum_RG;
            thisStepMult[X] <== toAccumulator_RG;  // For Debug
        }
    }
    
    // Calculate RGW
    // TODO: Optimise bit width to avoid overflow
    OffsetExpr Offset_RGW = stream.makeOffsetAutoLoop("Layer"+ID+"Offset_RGW");
    for (int X=0; X<NumInBlocks; ++X) {
        for (int Y=0; Y<NumOutBlocks; ++Y) {
            DFEVar NewRGW = BwdRGWRdGridVec[X][Y] + BwdPrevLayer[X] * RGLayer[Y];
            BwdRGWWrGridVec[X][Y] <== isInitW ? constant.var(Def.DataType, 0) : stream.offset(NewRGW, -Offset_RGW);
        }
    }
    BwdRGWWrAddr <== isInitW ? InitWPortAddr : stream.offset(RGWReadAddr, -Offset_RGW);
    BwdRGWWrEn   <== isInitW | stream.offset(isRGWUpdating, -Offset_RGW);

    // Calculate RGB
    OffsetExpr Offset_RGB = stream.makeOffsetAutoLoop("Layer"+ID+"Offset_RGB");
    for (int Y=0; Y<NumOutBlocks; ++Y) {
        DFEVar NewRGB = BwdRGBRead[Y] + RGLayer[Y];
        BwdRGBWrite[Y] <== isInitB ? constant.var(Def.DataType, 0) : stream.offset(NewRGB, -Offset_RGB);
    }
    BwdRGBWrAddr <== isInitB ? InitBPortAddr : stream.offset(RGBReadAddr, -Offset_RGB);
    BwdRGBWrEn   <== isInitB | stream.offset(isRGBUpdating, -Offset_RGB);


    // For Simulation
    // Debug - Checking De-Activation
//    debug.simPrintf(isBwdCalculating, "[%4d] W[%2d][%2d]=W[%2d] Buf2RdAddr=%2d | RG_2[0:3]=(%f, %f, %f, %f), y2[0:3]=(%f, %f, %f, %f) | RGLayer[0:3][%2d]=(%f, %f, %f, %f)\n", control.count.simpleCounter(32), BwdRowAddr, BwdColAddr, WPortAddr, BwdNextLayerReadOffsetAddr, BwdNextRGLayer[0], BwdNextRGLayer[1], BwdNextRGLayer[2], BwdNextRGLayer[3], BwdNextLayer[0], BwdNextLayer[1], BwdNextLayer[2], BwdNextLayer[3], BwdColAddr, RGLayer[0], RGLayer[1], RGLayer[2], RGLayer[3]);

    // Debug - Checking RG Calculation - Row[0]Col[:]
//    debug.simPrintf(isBwdCalculating, "[%4d] W[%2d][%2d]=W[%2d] | W[0:3][0]=(%f, %f, %f, %f), RG=(%f, %f, %f, %f) => %.12f | RG_1[0]=%.12f, V=%d\n", control.count.simpleCounter(32), BwdRowAddr, BwdColAddr, WPortAddr, BwdWGridVec[0][0], BwdWGridVec[0][1], BwdWGridVec[0][2], BwdWGridVec[0][3], RGLayer[0], RGLayer[1], RGLayer[2], RGLayer[3], thisStepMult[0], RGVec[0], BwdValid);
//    debug.simPrintf(BwdValid, "\n");

    // Debug - Checking BwdPrevLayer
//    debug.simPrintf(isBwdCalculating, "[%4d] W[%2d][%2d]=W[%2d] | RGW[0:3][0]=>(%f, %f, %f, %f), y_1[0]=%.12f | RGW[0:3][0]<=(%f, %f, %f, %f)\n", control.count.simpleCounter(32), BwdRowAddr, BwdColAddr, WPortAddr, BwdRGWRdGridVec[0][0], BwdRGWRdGridVec[0][1], BwdRGWRdGridVec[0][2], BwdRGWRdGridVec[0][3], BwdPrevLayer[0], BwdRGWWrGridVec[0][0], BwdRGWWrGridVec[0][1], BwdRGWWrGridVec[0][2], BwdRGWWrGridVec[0][3]);



    /*************************************************************************************
    *                                    Read Back                                       *
    *************************************************************************************/



    // RGW Read Back Data
    DFEVector<DFEVar> RGWReadBackVec = InVecType.newInstance(this);
    for (int X=0; X<NumInBlocks; ++X) {
        RGWReadBackVec[X] <== control.mux(RGReadColBaseAddr, BwdRGWRdGridVec[X].getElementsAsList());
    }
    DFEVar RGWReadBackData = control.mux(RGReadRowBaseAddr, RGWReadBackVec.getElementsAsList());

    // RGB Read Back Data
    DFEVar RGBReadBackData = control.mux(RGReadColBaseAddr, BwdRGBRead.getElementsAsList());

    // RG Read Back Data
    RGReadBackData = isReadingBackRGW ? RGWReadBackData : RGBReadBackData;


	}

    /////////////////////// Activation Functions ///////////////////////

    // tanh() activation function
    // Remarks: temporary workaround: Assign a suitable Data Type to avoid overflow
    // TODO: final solution: use Function Approximation
    private DFEVar tanh(DFEVar x) {
        optimization.pushEnableBitGrowth(true);
        DFEVar exp_2x = KernelMath.exp(2*x);
        DFEVar result = (exp_2x - 1) / (exp_2x + 1);
        optimization.popEnableBitGrowth();
        return result.cast(Def.DataType);
    }


}
